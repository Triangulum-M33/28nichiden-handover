引き継ぎ資料の作成方法
======================

-  書いた人: Kenichi Ito(nichiden\_27)
-  更新日時: 2018/01/31
-  実行に必要な知識・技能

   -  CUIを扱ったことがある
   -  Gitを使ったことがある(できれば)
   -  GitHubを使ったことがある(できれば)

-  難易度: 3/練習・勉強が必要
-  情報の必須度: 3/必要な場合がある

概要
----

まず、本記事の執筆が遅れたことをお詫びいたします。
学科の演習と試験に追われていたらいつの間にか年が明けてしまって今に至ります。

編集ができる最低限の所から徐々に情報を増やしていく予定です。
説明が足りない部分があれば、お問い合わせ頂ければ幸いです。

日電引き継ぎに使用している技術やツール
--------------------------------------

1. Markdown記法
2. Sphinx
3. Pandoc
4. GitとGithub

日電は引き継ぎをWordやLaTeXなどで作っていましたが、27でSphinxを使用したWebサイト形式に変えました。
各代でそれぞれPDFの資料を作成していては分量は増える一方で、\ **読む側の負担**\ が増してしまいます。
今は不要な情報と必要な情報が混ざった古い資料が沢山あるのです(これはこれで歴史を感じられて楽しいですが)。
従って、多くの情報を閲覧しやすく、また追記修正しやすい形にまとめる必要がありました。

結果的に、ソフトウェアエンジニア寄りの技術を多用しています。
ただ、多くの事はツール任せで済むはずです。
GitとGithubを使う事は必須ではないので、皆さんの都合に応じて決めてください。

Markdown
~~~~~~~~

フォーマット付きの文書を作成できる「軽量マークアップ言語」の一種です。
見出しや太字、画像などが入った文書を作成することができます。

Wordとの一番の違いは、\ **テキストデータ**\ であることです。
WindowsでもMacでも、特定のソフトに依存せずに閲覧できます。
誰がどんなPCで開いても問題なく表示・編集できるので、次世代への引き継ぎが簡単です。

文法については\ `Markdown記法
チートシート <https://gist.github.com/mignonstyle/083c9e1651d7734f84c99b8cf49d57fa>`__\ などを見てください。
一つ注意が必要なのが、Markdownは\ **環境によって微妙に仕様が違う**\ ことです。
例えば、太字にする際に **空白を両側に入れる**
か\ **空白を入れない**\ かの違いなどです(日電引き継ぎの環境では空白は不要)。
変換した結果を確認して、表示が崩れていないか確認することを勧めます。

Sphinx
~~~~~~

Markdownだけでは単なる文法なので、それを綺麗に表示するツールが必要です。
**Sphinx**\ はドキュメント作成に特化したツールで、本来はPythonのドキュメント作成用に作られました。
WebページやPDF(要LaTeX)をはじめ、多数の形式で出力できます。

導入
^^^^

Sphinx自体もPythonでできています。
pipがある環境なら、導入は\ ``sudo pip install Sphinx``\ で大丈夫です。
Windowsの方は以下などを参考にしてください。

-  `python3.6にsphinxをインストール（Windows） <https://qiita.com/cosmos4701141/items/949b2c785a85a0cd5db9>`__

基本的には好きな方法でPythonを導入して、SphinxをインストールすればOKです。
``sphinx-quickstart``\ と入力してなにやら表示されれば、導入に成功しています。

reST記法について
^^^^^^^^^^^^^^^^

Sphinxについてググっていると、「reStructuredText」とか「.rst」のような単語をよく見ると思います。
**reStructuredText**\ は、Sphinxが標準で使う軽量マークアップ言語です。
Markdownの仲間ですが、できることがより多くなっています。
その分書き方が難しいので、日電では採用していません。

唯一\ ``index.rst``\ だけは目次作成のために書く必要があるので、ご注意ください。
他の記事は、一旦reSTに変換してからSphinxに読ませています。
SphinxはMarkdownをそのまま処理することもできますが、諸々の理由(数式を入れたいなど)から断念しました。

出力
^^^^

日電引き継ぎの一番上のディレクトリにある\ ``build.sh``\ を実行すると、変換作業を行って\ ``doc/``\ 以下に全ページを出力するようになってます。
ただ、macOSで作っていたので、Windowsのコマンドプロンプトではおそらく動かないです……。

もしWin環境で出力したいのであれば、Win10ではbashが使えるので導入するか、スクリプト自体を書き換える必要があると思います。

編集
^^^^

既存の記事を編集する場合は、単に該当のファイルを書き換えて保存してからビルドを行うだけです。
記事を追加するときは、\ ``index.rst``\ に記事のファイル名を忘れずに追加しましょう。
でないとせっかく書いた記事が目次に出てきません。

Pandoc
~~~~~~

Pandocは、文書の形式を互いに変換してくれるツールです。
その威力は、\ `Try
Pandoc! <https://pandoc.org/try/>`__\ で簡単に試せます。
日電引き継ぎでは、MarkdownをreSTに自動変換するのに使っています。

導入は、\ `Pandocのリリースページ <https://github.com/jgm/pandoc/releases>`__\ から最新版のインストーラを落として実行するだけです。
``pandoc -v``\ コマンドでバージョン情報が出てくれば導入完了です。

GitとGithub
~~~~~~~~~~~

`27引き継ぎのサイト <https://kn1cht.github.io/nichiden-handover/>`__\ は、GitHub
Pagesという無料(!)サービスで公開しています。
``docs/``\ フォルダにデータを入れておくと、Webサイトを公開してくれるありがたいものです(\ `解説 <https://qiita.com/tonkotsuboy_com/items/f98667b89228b98bc096>`__)。
ただ、GitとGitHubの操作がわかっている必要があります。

Gitはバージョン管理や差分・履歴の管理がとても簡単で、この先ソフトウェアを触るならぜひ習得しておくべきものです。
ただ概念がとっつきにくいのも事実で、Gitの操作がわからず作業が止まることがもしあれば、それは本末転倒だと思います。

引き継ぎのデータを自分のPCにコピーし、Sphinxで出力した\ ``index.html``\ をブラウザで開くだけでも閲覧自体に全く問題はありません。
皆さんの技術レベルに応じて適切な方法を洗濯して頂ければと思います。
